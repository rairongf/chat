{
  // Place your business-panel workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Default context template": {
    "scope": "typescript,typescriptreact",
    "prefix": "context.default",
    "description": "Add default context template",
    "body": [
      "import { BaseContextProps } from '@/modules/common';",
      "import { createContext, useContext, useEffect } from 'react';",
      "",
      "type $1ContextData = {$0};",
      "",
      "export const $1Context = createContext<$1ContextData>({} as $1ContextData);",
      "",
      "export function $1Provider({ children }: BaseContextProps) {",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return (",
      "    <$1Context.Provider  value={{}}>",
      "      {children}",
      "    </$1Context.Provider>",
      "  );",
      "}",
      "",
      "export const use$1 = () => useContext($1Context);"
    ]
  },
  "Default usecase interface": {
    "scope": "typescript,typescriptreact",
    "prefix": "interface.usecase.default",
    "description": "Add default usecase interface",
    "body": [
      "import { BaseUsecase } from '@/modules/common';",
      "",
      "export type I$1Usecase = BaseUsecase;",
      "",
    ]
  },
  "Default usecase implementation": {
    "scope": "typescript,typescriptreact",
    "prefix": "usecase.default",
    "description": "Add default usecase implementation",
    "body": [
      "import { I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Usecase } from './interface';",
      "",
      "export function use${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Usecase = async () => {",
      "    try {",
      "      const { data, didSucceed, error } = await $0();",
      "",
      "      if (!didSucceed) {",
      "        return;",
      "      }",
      "",
      "      return data;",
      "    } catch (err) {",
      "    }",
      "  };",
      "",
      "  return { ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/} };",
      "}",
      "",
    ]
  },
  "Default repository implementation": {
    "scope": "typescript,typescriptreact",
    "prefix": "repository.default",
    "description": "Add default repository implementation",
    "body": [
      "import { api, BaseRepository } from '@/modules/common';",
      "",
      "export type I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Repository = BaseRepository<$1>;",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Repository = () => {",
      "  return api.get(`/$2`);",
      "};",
      "",
    ]
  },
  "Default paginated repository implementation": {
    "scope": "typescript,typescriptreact",
    "prefix": "paginated.repository.default",
    "description": "Add default paginated repository implementation",
    "body": [
      "import { api, PaginatedRepository } from '@/modules/common';",
      "",
      "export type I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Repository = PaginatedRepository<$1>;",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Repository = ({ page = 1, limit = 20 }) => {",
      "  return api.get(`/$2`, {",
      "    params: {",
      "      page,",
      "      limit",
      "    }",
      "  });",
      "};",
      "",
    ]
  },
  "Add usecase reference inside context": {
    "scope": "typescript,typescriptreact",
    "prefix": "reference.usecase_in_context",
    "description": "Add usecase reference inside context",
    "body": [
      "const { ${CLIPBOARD} } = use${CLIPBOARD/(.*)/${1:/pascalcase}/}();"
    ]
  }
}